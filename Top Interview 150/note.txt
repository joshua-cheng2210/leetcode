Top Interview 150:
Array List notes
# - instead of looking for the next val to be replace, the algorithm looked out for the next non-val to replace the val
# - try practising debugging using comments. meaning comment the value of the variable to keep track of the value and verify your algorithm
# - use substring aproach
# - keep multiple pointers or trackers
# - this solution is like BFS, can you see it?
# - be sure on the priority of the decision making. which factor is the most important. reaching the last index or if you reach step == 0? 
# - you must get use to debugging your own before spamming the debugger
# - challenge: is it posssible to not use any in-built functions?
# - be careful with indexing
# - identify what you definitely know
#   - if you want to find the optimal value like the max profit in this case, your algorithm is definitely going to be O(n) since the you need to make comparison with every number in the list and also if the list is not sorted]
#   - figure out if you actually need to remember the previou value that has already been iterated through
#   - maybe its hard to visualise the problem with a list, try drawing a graph
# - so this solution is adding many small changes rather than my solution that adds little big changes - how is adding small changes faster? is it because i have too many if statements and checkings?
# - using reverse() is slower than using list[::-1]
# - Boyer-Moore Voting Algorithm # if you're sure the item's occurance you're looking for is more that half of the search space, this is your alg
# - to reduce a time complexity from O(n^2) to O(n), the common way is to create an additional array to make notes of your iterations and causing the space complexity to be O(M)
# - an advance version of the normal dictionary data structure - defaultdict()
# - normal dict will not edit the value of a non-existant key in the dict; but for defaultdict(), it will automatically initialize the key and set the value
# - it keeps the value as a key in the defaultdict() and add it to the array; and then it keeps the index of the item in the array as the value in the defaultdict() - this can make insert() and del() a time of O(1) but of course space of O(n)
# - idea is use both a dictionary and an array to have O(1) in search, add and del. Using a dictionary to keep track of the index of the element in a normal array
# - understand the pattern to get the answer for 1 element by 1) know what information you need 2) think how to get the information
# - some times to have a time complexit better than O(n^2), if you don't know how to only iterate the list once, try any methods like iterating the list multiple times but not for len(list) times
# - O(x n), where x < n, is still better than O(n^2). try iterating multiple times like front to back and back to front
# - when you get a questions, which you're given a list input. try:
# 1) iterating multiple times front to back or back to front
# 2) for each element in the list, try seeing if there are any patterns between the elements to the left and right of it
# 3) try figuring out if it has anything got to do with the peaks or lows of the graph or 4) try local andgloabl minima and maxima